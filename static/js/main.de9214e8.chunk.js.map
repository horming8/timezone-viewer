{"version":3,"sources":["TimezoneViewer.js","index.js"],"names":["TimezoneViewer","useState","moment","currentTime","setCurrentTime","countries","setCountries","countryOptions","setCountryOptions","updatedTimezones","setUpdatedTimezones","inputCountryId","setInputCountryId","inputCountryName","setInputCountryName","inputTimezone","setInputTimezone","timer","useRef","userTimezones","useEffect","ct","getAllCountries","c","timezones","timezoneOptions","forEach","value","index","timezone","sort","left","right","i","name","current","setInterval","clearInterval","updateTimezones","currentTimezones","Object","entries","map","tz","date","format","time","id","code","country","Box","textAlign","fontSize","mx","mt","boxShadow","bgcolor","color","display","justifyContent","m","Autocomplete","size","style","width","options","getOptionLabel","option","onChange","event","inputValue","renderInput","params","TextField","label","variant","Fab","aria-label","onClick","newKey","join","includes","disabled","height","columns","field","sortIndex","rows","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de9214e8.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react'\n\nimport ct from 'countries-and-timezones'\nimport moment from 'moment'\nimport 'moment-timezone'\n\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\n\nimport { Box, TextField } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport { DataGrid } from '@material-ui/data-grid'\n\nconst TimezoneViewer = () => {\n    const [currentTime, setCurrentTime] = useState(moment())\n    const [countries, setCountries] = useState({})\n    const [countryOptions, setCountryOptions] = useState([])\n    const [updatedTimezones, setUpdatedTimezones] = useState([])\n\n    const [inputCountryId, setInputCountryId] = useState('')\n    const [inputCountryName, setInputCountryName] = useState('')\n    const [inputTimezone, setInputTimezone] = useState('')\n\n    const timer = useRef(0)\n    const userTimezones = useRef([])\n\n    useEffect(() => {\n        // convert timezones array of string to array of object\n        let countries = ct.getAllCountries()\n        for (let c in countries) {\n            let { timezones } = countries[c];\n            let timezoneOptions = []\n            timezones.forEach((value, index) => {\n                timezoneOptions[index] = { timezone: value };\n            })\n            timezoneOptions.sort((left, right) => (left.timezone > right.timezone) ? 1 : -1)\n            countries[c].timezones = timezoneOptions;\n        }\n        setCountries(countries)\n\n        // create an array for country autocompletion\n        let countryOptions = []\n        let i = 0\n        for (let c in countries) {\n            countryOptions[i++] = countries[c];\n        }\n        countryOptions.sort((left, right) => (left.name > right.name) ? 1 : -1)\n        setCountryOptions(countryOptions)\n        timer.current = setInterval(() => setCurrentTime(moment()), 1000);\n\n        return () => {\n            clearInterval(timer.current)\n        }\n    }, [])\n\n    useEffect(() => {\n        updateTimezones()\n    }, [currentTime])\n\n    const handleChangeCountry = (event, value) => {\n        if (value) {\n            setInputCountryId(value.id)\n            setInputCountryName(value.name)\n            setInputTimezone('')\n        }\n    }\n\n    const handleChangeTimezone = (event, value) => {\n        if (value) {\n            setInputTimezone(value.timezone)\n        }\n    }\n\n    const handleAddTimezone = () => {\n        if (inputCountryId && inputTimezone) {\n            const newKey = [inputCountryId, inputCountryName, inputTimezone].join('-')\n            if (!userTimezones.current.includes(newKey)) {\n                userTimezones.current[newKey] = {\n                    code: inputCountryId,\n                    country: inputCountryName,\n                    timezone: inputTimezone,\n                    date: currentTime.tz(inputTimezone).format('L'),\n                    time: currentTime.tz(inputTimezone).format('LTS')\n                }\n                // reset user input\n                setInputCountryName('')\n                setInputTimezone('')\n                updateTimezones()\n            }\n        }\n    }\n\n    const updateTimezones = () => {\n        let currentTimezones = Object.entries(userTimezones.current).map((tz) => {\n            let { timezone } = tz[1]\n            let date = currentTime.tz(timezone).format('L')\n            let time = currentTime.tz(timezone).format('LTS')\n            return {\n                id: tz[0],\n                code: tz[1].code,\n                country: tz[1].country,\n                timezone: tz[1].timezone,\n                date: date,\n                time: time,\n            }\n        })\n        setUpdatedTimezones(currentTimezones)\n    }\n\n    return (\n        <Fragment>\n            <Box\n                textAlign='center' fontSize='h4.fontSize'\n                mx={-1} mt={-1} boxShadow={3}\n                bgcolor='primary.main' color='primary.contrastText'\n            >\n                Timezone Viewer\n            </Box>\n            <Box display='flex' justifyContent='center'>\n                <Box m={'10px'}>\n                    <Autocomplete size='small' style={{ width: 300 }}\n                        options={countryOptions}\n                        getOptionLabel={(option) => option.name}\n                        onChange={handleChangeCountry}\n                        inputValue={inputCountryName}\n                        renderInput={(params) => <TextField {...params} label='Country' variant='outlined' />}\n                    />\n                </Box>\n                <Box m={'10px'}>\n                    <Autocomplete size='small' style={{ width: 300 }}\n                        options={inputCountryId ? countries[inputCountryId].timezones : []}\n                        getOptionLabel={(option) => option.timezone}\n                        onChange={handleChangeTimezone}\n                        inputValue={inputTimezone}\n                        renderInput={(params) => <TextField {...params} label='Timezone' variant='outlined' />}\n                    />\n                </Box>\n                <Box m={'10px'}>\n                    <Fab size='small' color='primary'\n                        aria-label='add'\n                        onClick={handleAddTimezone}\n                        disabled={!inputCountryName || !inputTimezone}\n                    >\n                        <AddIcon />\n                    </Fab>\n                </Box>\n            </Box>\n            <Box style={{ height: 600, width: '100%' }}>\n                <DataGrid\n                    columns={[\n                        { field: 'code', sortIndex: 0 },\n                        { field: 'country', sortIndex: 1, width: 300 },\n                        { field: 'timezone', sortIndex: 2, width: 300 },\n                        { field: 'date', sortIndex: 3, width: 150 },\n                        { field: 'time', sortIndex: 4, width: 150 },\n                    ]}\n                    rows={updatedTimezones}\n                />\n            </Box>\n        </Fragment>\n    )\n}\n\nexport default TimezoneViewer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TimezoneViewer from './TimezoneViewer'\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimezoneViewer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}