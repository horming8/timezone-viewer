{"version":3,"sources":["App.js","index.js"],"names":["App","handleChangeCountry","event","value","setState","inputCountryId","id","inputCountryName","name","handleChangeTimezone","inputTimezone","handleAddTimezone","state","newKey","timezone","join","clocks","includes","code","country","date","currentTime","tz","format","time","moment","countries","countryOptions","prop","this","ct","getAllCountries","c","timezones","timezoneOptions","forEach","index","sort","left","right","i","tick","setInterval","clearInterval","Object","entries","map","Box","display","justifyContent","alignItems","Autocomplete","size","style","width","options","getOptionLabel","option","renderInput","params","TextField","label","variant","onChange","Fab","color","aria-label","onClick","height","columns","field","rows","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f815f0c.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\n\nimport ct from 'countries-and-timezones'\nimport moment from 'moment'\nimport 'moment-timezone'\n\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Box, TextField } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport { DataGrid } from '@material-ui/data-grid';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      currentTime: moment(),\n      inputCountryId: '',\n      inputCountryName: '',\n      inputTimezone: '',\n    }\n\n    this.clocks = []\n    this.countries = {}\n    this.countryOptions = []\n  }\n\n  componentDidMount(prop, state) {\n    this.countries = ct.getAllCountries()\n\n    // convert timezones array of string to array of object\n    for (let c in this.countries) {\n      let { timezones } = this.countries[c];\n      let timezoneOptions = []\n      timezones.forEach((value, index) => {\n        timezoneOptions[index] = { timezone: value };\n      })\n      timezoneOptions.sort((left, right) => (left.timezone > right.timezone) ? 1 : -1)\n      this.countries[c].timezones = timezoneOptions;\n    }\n\n    // create an array for country autocompletion\n    let i = 0\n    for (let c in this.countries) {\n      this.countryOptions[i++] = this.countries[c];\n    }\n    this.countryOptions.sort((left, right) => (left.name > right.name) ? 1 : -1)\n\n    // update the timezones per second\n    this.tick = setInterval(() => this.setState({\n      currentTime: moment()\n    }), 1000)\n  }\n\n  componentWillUnmount(prop, state) {\n    clearInterval(this.tick)\n  }\n\n  handleChangeCountry = (event, value) => {\n    if (value)\n      this.setState({\n        inputCountryId: value.id,\n        inputCountryName: value.name\n      })\n  }\n\n  handleChangeTimezone = (event, value) => {\n    if (value)\n      this.setState({ inputTimezone: value })\n  }\n\n  handleAddTimezone = () => {\n    const { inputCountryId, inputCountryName, inputTimezone } = this.state;\n\n    if (inputCountryId && inputTimezone) {\n      const newKey = [inputCountryId, inputCountryName, inputTimezone.timezone].join('-')\n      if (!this.clocks.includes(newKey)) {\n        this.clocks[newKey] = {\n          code: inputCountryId,\n          country: inputCountryName,\n          timezone: inputTimezone.timezone,\n          date: this.state.currentTime.tz(inputTimezone.timezone).format('L'),\n          time: this.state.currentTime.tz(inputTimezone.timezone).format('LTS')\n        }\n      }\n\n      if (!this.clocks.includes(newKey)) {\n        this.clocks[newKey] = {\n          code: inputCountryId,\n          country: inputCountryName,\n          timezone: inputTimezone.timezone,\n          date: this.state.currentTime.tz(inputTimezone.timezone).format('L'),\n          time: this.state.currentTime.tz(inputTimezone.timezone).format('LTS')\n        }\n      }\n    }\n  }\n\n  render() {\n    const timezones = Object.entries(this.clocks).map((c) => {\n      let { timezone } = c[1]\n      let date = this.state.currentTime.tz(timezone).format('L')\n      let time = this.state.currentTime.tz(timezone).format('LTS')\n      return {\n        id: c[0],\n        code: c[1].code,\n        country: c[1].country,\n        timezone: c[1].timezone,\n        date: date,\n        time: time,\n      }\n    })\n\n    return (\n      <Fragment>\n        <Box display='flex' justifyContent='center' alignItems='center'>\n          <Autocomplete\n            size='small'\n            style={{ width: 300 }}\n            options={this.countryOptions}\n            getOptionLabel={(option) => option.name}\n            renderInput={(params) => <TextField {...params} label='Country' variant='outlined' />}\n            onChange={this.handleChangeCountry}\n          />\n          <Autocomplete\n            size='small'\n            style={{ width: 300 }}\n            options={this.state.inputCountryId ? this.countries[this.state.inputCountryId].timezones : []}\n            getOptionLabel={(option) => option.timezone}\n            renderInput={(params) => <TextField {...params} label='Timezone' variant='outlined' />}\n            onChange={this.handleChangeTimezone}\n          />\n          <Fab\n            size='small'\n            color='primary'\n            aria-label='add'\n            onClick={this.handleAddTimezone}\n          >\n            <AddIcon />\n          </Fab>\n        </Box>\n        <div style={{ height: 600, width: '100%' }}>\n          <DataGrid\n            columns={[\n              { field: 'code' },\n              { field: 'country', width: 300 },\n              { field: 'timezone', width: 300 },\n              { field: 'date', width: 150 },\n              { field: 'time', width: 150 },\n            ]}\n            rows={timezones}\n          />\n          </div>\n      </Fragment >\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}